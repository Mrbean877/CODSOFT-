{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12866715,"sourceType":"datasetVersion","datasetId":8138874}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom tqdm import tqdm\n\nnltk.download(\"punkt\")\nnltk.download(\"stopwords\")\n\nfile_path = '/kaggle/input/genre-classification-dataset/train_data.txt'\ndata = pd.read_csv(file_path, sep='::: ', engine='python', names=['id', 'title', 'genre', 'plot'])\n\nstop_words = set(stopwords.words('english'))\n\ndef clean_text(text):\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    text = text.lower()\n    tokens = word_tokenize(text)\n    tokens = [word for word in tokens if word not in stop_words]\n    return ' '.join(tokens)\n\ndata['cleaned_plot'] = [clean_text(t) for t in tqdm(data['plot'], desc=\"Cleaning\")]\n\ntexts = data['cleaned_plot']\nlabels = data['genre']\n\nunique_labels, counts = np.unique(labels, return_counts=True)\ntotal = len(labels)\nweights = {label: total / (len(unique_labels) * count) for label, count in zip(unique_labels, counts)}\n\ntfidf = TfidfVectorizer(max_features=10000, ngram_range=(1, 2))\nX = tfidf.fit_transform(tqdm(texts, desc=\"TF-IDF\"))\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)\n\nmodel = LogisticRegression(max_iter=1000, class_weight=weights)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\ntest_plot = \"A zombie falls in love with a human\"\ncleaned = clean_text(test_plot)\nplot_tfidf = tfidf.transform([cleaned])\npredicted_genre = model.predict(plot_tfidf)\nprint(\"Predicted Genre:\", predicted_genre[0])\n","metadata":{"_uuid":"378e45fa-bdc3-4648-96d7-f923641f26fd","_cell_guid":"3f006459-b915-46cd-834f-14f896844d8f","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-09-09T16:25:28.330351Z","iopub.execute_input":"2025-09-09T16:25:28.331057Z","iopub.status.idle":"2025-09-09T16:27:41.614966Z","shell.execute_reply.started":"2025-09-09T16:25:28.331027Z","shell.execute_reply":"2025-09-09T16:27:41.614069Z"}},"outputs":[{"name":"stderr","text":"[nltk_data] Error loading punkt: <urlopen error [Errno -3] Temporary\n[nltk_data]     failure in name resolution>\n[nltk_data] Error loading stopwords: <urlopen error [Errno -3]\n[nltk_data]     Temporary failure in name resolution>\nCleaning: 100%|██████████| 54214/54214 [00:20<00:00, 2661.17it/s]\nTF-IDF: 100%|██████████| 54214/54214 [00:06<00:00, 8635.45it/s]\n","output_type":"stream"},{"name":"stdout","text":"Accuracy: 0.4814165821267177\n              precision    recall  f1-score   support\n\n     action        0.34      0.46      0.39       263\n      adult        0.34      0.65      0.45       112\n  adventure        0.18      0.33      0.23       139\n  animation        0.19      0.25      0.21       104\n  biography        0.04      0.08      0.05        61\n     comedy        0.60      0.47      0.53      1443\n      crime        0.13      0.32      0.18       107\ndocumentary        0.81      0.59      0.68      2659\n      drama        0.72      0.40      0.52      2697\n     family        0.14      0.31      0.19       150\n    fantasy        0.11      0.16      0.13        74\n  game-show        0.67      0.75      0.71        40\n    history        0.05      0.20      0.08        45\n     horror        0.55      0.69      0.61       431\n      music        0.38      0.75      0.50       144\n    musical        0.14      0.34      0.20        50\n    mystery        0.08      0.20      0.11        56\n       news        0.12      0.24      0.16        34\n reality-tv        0.34      0.61      0.44       192\n    romance        0.12      0.38      0.18       151\n     sci-fi        0.28      0.49      0.36       143\n      short        0.45      0.39      0.42      1045\n      sport        0.33      0.73      0.46        93\n  talk-show        0.27      0.49      0.35        81\n   thriller        0.24      0.33      0.28       309\n        war        0.11      0.45      0.18        20\n    western        0.70      0.89      0.78       200\n\n    accuracy                           0.48     10843\n   macro avg       0.31      0.44      0.35     10843\nweighted avg       0.59      0.48      0.51     10843\n\nPredicted Genre: romance \n","output_type":"stream"}],"execution_count":1}]}
